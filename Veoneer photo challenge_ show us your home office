{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Veoneer photo challenge: show us your home office","provenance":[{"file_id":"https://github.com/meysamsadeghi/VNE_photo_challenge/blob/master/Veoneer_Innovation_with_Neural_style_transfer.ipynb","timestamp":1585472599399}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"VS1X6kuQZtpN","colab_type":"text"},"source":["# *Veoneer Photo Challenge 2020 - Show us your home office*\n","\n","Have you ever wondered how amazing it would be, if you could have your favorite photo being painted by your favorite artist? In this notebook I would like to show you how I used deep neural networks to re-paint my **home_office** as if Van Gogh (and other artists) drawn it.\n","\n","\n","\n","The idea comes from the paper \"Image style transfer using convolutional neural networks\" by LA Gatys, AS Ecker, M Bethge.\n","\n","Special thanks to TensorFlow 2, and google colab! (read more [HERE](https://www.tensorflow.org/tutorials/generative/style_transfer).)"]},{"cell_type":"code","metadata":{"id":"y7doJtvNzl3p","colab_type":"code","colab":{}},"source":["from __future__ import absolute_import, division, print_function, unicode_literals\n","\n","import tensorflow as tf\n","import IPython.display as display\n","import numpy as np\n","import time\n","import functools\n","import matplotlib.pyplot as plt\n","import matplotlib as mpl\n","mpl.rcParams['figure.figsize'] = (12,12)\n","mpl.rcParams['axes.grid'] = False"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b13IGQR1uF0I","colab_type":"text"},"source":["First, load the image of your home office and the paintings of your beloved artists using the code cell below."]},{"cell_type":"code","metadata":{"id":"-4lEuy_iztQU","colab_type":"code","outputId":"eabf8dbe-622d-439a-d5a7-d8a62ab50650","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":246},"executionInfo":{"status":"ok","timestamp":1585479001538,"user_tz":-120,"elapsed":81149,"user":{"displayName":"meysam sadeghi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg9FyGX5Adg2_OFY2w7lccoVCdyXAHqQQgaHlOdrQ=s64","userId":"16670234376997471964"}}},"source":["from google.colab import files\n","upload_it = files.upload()"],"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-016ad126-53da-4dbc-8e67-6c3913c35d4c\" name=\"files[]\" multiple disabled />\n","     <output id=\"result-016ad126-53da-4dbc-8e67-6c3913c35d4c\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving home_office.jpg to home_office.jpg\n","Saving Leonoid_Afremov_Couple_under_one_umbrella.jpg to Leonoid_Afremov_Couple_under_one_umbrella.jpg\n","Saving Natasha_Wescoat_june_tree.jpg to Natasha_Wescoat_june_tree.jpg\n","Saving picasso_girl_before_a_mirror.jpg to picasso_girl_before_a_mirror.jpg\n","Saving Van_Gogh_sun_flower.jpg to Van_Gogh_sun_flower.jpg\n","Saving Wassily_Kandinsky-compositionVII.jpg to Wassily_Kandinsky-compositionVII.jpg\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ppjhgrC3zoPD","colab_type":"code","colab":{}},"source":["def load_img(path_to_img):\n","  max_dim = 1024\n","  img = tf.io.read_file(path_to_img)\n","  img = tf.image.decode_image(img, channels=3)\n","  img = tf.image.convert_image_dtype(img, tf.float32)\n","  shape = tf.cast(tf.shape(img)[:-1], tf.float32)\n","  long_dim = max(shape)\n","  scale = max_dim / long_dim\n","  new_shape = tf.cast(shape * scale, tf.int32)\n","  img = tf.image.resize(img, new_shape)\n","  img = img[tf.newaxis, :]\n","  return img\n","\n","\n","def imshow(image, title=None):\n","  if len(image.shape) > 3:\n","    image = tf.squeeze(image, axis=0)\n","  plt.imshow(image)\n","  if title:\n","    plt.title(title)\n","\n","\n","def clip_0_1(image):\n","  return tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)\n","\n","\n","def vgg_layers(layer_names):\n","  vgg = tf.keras.applications.VGG19(include_top=False, weights='imagenet')\n","  vgg.trainable = False\n","  outputs = [vgg.get_layer(name).output for name in layer_names]\n","  model = tf.keras.Model([vgg.input], outputs)\n","  return model\n","\n","\n","def gram_matrix(input_tensor):\n","  result = tf.linalg.einsum('bijc,bijd->bcd', input_tensor, input_tensor)\n","  input_shape = tf.shape(input_tensor)\n","  num_locations = tf.cast(input_shape[1]*input_shape[2], tf.float32)\n","  return result/(num_locations)\n","\n","\n","class StyleContentModel(tf.keras.models.Model):\n","  def __init__(self, style_layers, content_layers):\n","    super(StyleContentModel, self).__init__()\n","    self.vgg =  vgg_layers(style_layers + content_layers)\n","    self.style_layers = style_layers\n","    self.content_layers = content_layers\n","    self.num_style_layers = len(style_layers)\n","    self.vgg.trainable = False\n","\n","  def call(self, inputs):\n","    \"Expects float input in [0,1]\"\n","    inputs = inputs*255.0\n","    preprocessed_input = tf.keras.applications.vgg19.preprocess_input(inputs)\n","    outputs = self.vgg(preprocessed_input)\n","    style_outputs, content_outputs = (outputs[:self.num_style_layers], \n","                                      outputs[self.num_style_layers:])\n","    style_outputs = [gram_matrix(style_output)\n","                     for style_output in style_outputs]\n","    content_dict = {content_name:value \n","                    for content_name, value \n","                    in zip(self.content_layers, content_outputs)}\n","    style_dict = {style_name:value\n","                  for style_name, value\n","                  in zip(self.style_layers, style_outputs)}\n","    return {'content':content_dict, 'style':style_dict}\n","  \n","  \n","def style_content_loss(outputs, target_styles, target_contents, style_weight, content_weight):\n","  style_outputs = outputs['style']\n","  content_outputs = outputs['content']\n","  style_loss = tf.add_n([tf.reduce_mean((style_outputs[name]-target_styles[name])**2) \n","                          for name in style_outputs.keys()])\n","  style_loss *= style_weight / num_style_layers\n","\n","  content_loss = tf.add_n([tf.reduce_mean((content_outputs[name]-target_contents[name])**2) \n","                            for name in content_outputs.keys()])\n","  content_loss *= content_weight / num_content_layers\n","  loss = style_loss + content_loss\n","  return loss\n","\n","\n","def train_step(image, target_styles, target_contents, extractor, style_weight, content_weight, opt):\n","  with tf.GradientTape() as tape:\n","    outputs = extractor(image)\n","    loss = style_content_loss(outputs, target_styles, target_contents, style_weight, content_weight)\n","\n","  grad = tape.gradient(loss, image)\n","  opt.apply_gradients([(grad, image)])\n","  image.assign(clip_0_1(image))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YlgAm1Rwzquy","colab_type":"code","colab":{}},"source":["content_layers = ['block5_conv2']\n","num_content_layers = len(content_layers)\n","style_layers = ['block1_conv1', 'block2_conv1', 'block3_conv1', 'block4_conv1', 'block5_conv1']\n","num_style_layers = len(style_layers)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4VRolSJfzwE4","colab_type":"code","colab":{}},"source":["def neural_style_transfer(content_str, style_str, style_layers, content_layers, num_epochs = 2, steps_per_epoch = 1000):\n","  content_image = load_img(content_str)\n","  style_image = load_img(style_str)\n","  extractor = StyleContentModel(style_layers, content_layers)\n","  results = extractor(tf.constant(content_image))\n","  style_results = results['style']\n","  target_styles = extractor(style_image)['style']\n","  target_contents = extractor(content_image)['content']\n","\n","  image = tf.Variable(content_image)\n","  opt = tf.optimizers.Adam(learning_rate=0.02, beta_1=0.99, epsilon=1e-1)\n","  style_weight=1e-2\n","  content_weight=1e4\n","\n","\n","  step = 0\n","  for n in range(num_epochs):\n","    for m in range(steps_per_epoch):\n","      step += 1\n","      train_step(image, target_styles, target_contents, extractor, style_weight, content_weight, opt)\n","      print(\".\", end='')\n","    #display.clear_output(wait=True)\n","    f, axes = plt.subplots(1,3,figsize=(45,45))\n","    axes[0].imshow(np.squeeze(content_image))\n","    axes[0].set_title('Content Image', size=30)\n","\n","    axes[1].imshow(np.squeeze(style_image))\n","    axes[1].set_title('Style Image', size=30)\n","\n","    axes[2].imshow(np.squeeze(image.read_value()))\n","    axes[2].set_title(\"Generated Image\", size= 30) # axes[2].set_title(\"Generated Image at step: {}\".format(step),  size=20)\n","    plt.show()\n","    if m == steps_per_epoch-1:\n","      plt.savefig('home_office_{}_step{}'.format(style_str.split('.')[0], step))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wp13fh3JTUsk","colab_type":"code","outputId":"d980b79e-6c6f-44c3-8904-01e724268386","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1EsfCC0eSWmzM-AcQQMM6gffdMMtmzOPe"},"executionInfo":{"status":"ok","timestamp":1585479518565,"user_tz":-120,"elapsed":467962,"user":{"displayName":"meysam sadeghi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg9FyGX5Adg2_OFY2w7lccoVCdyXAHqQQgaHlOdrQ=s64","userId":"16670234376997471964"}}},"source":["neural_style_transfer('home_office.jpg', 'Leonoid_Afremov_Couple_under_one_umbrella.jpg', style_layers, content_layers)"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"CQgFQy8R4Fio","colab_type":"code","outputId":"84092013-52cf-4308-c27a-508a7136e4fb","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1ghAciavw6dRPrGjYLG4qwyJwrbI344fh"},"executionInfo":{"status":"ok","timestamp":1585479983892,"user_tz":-120,"elapsed":465162,"user":{"displayName":"meysam sadeghi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg9FyGX5Adg2_OFY2w7lccoVCdyXAHqQQgaHlOdrQ=s64","userId":"16670234376997471964"}}},"source":["neural_style_transfer('home_office.jpg', 'Van_Gogh_sun_flower.jpg', style_layers, content_layers)"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"16_hjPk4z2cA","colab_type":"code","outputId":"434b3be3-61e3-4ced-d53b-c5094fceb439","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1y2WrC3xOhVKxd8mLin_UusGPvWlWMtNP"},"executionInfo":{"status":"ok","timestamp":1585480441553,"user_tz":-120,"elapsed":922799,"user":{"displayName":"meysam sadeghi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg9FyGX5Adg2_OFY2w7lccoVCdyXAHqQQgaHlOdrQ=s64","userId":"16670234376997471964"}}},"source":["neural_style_transfer('home_office.jpg', 'Natasha_Wescoat_june_tree.jpg', style_layers, content_layers)"],"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"0sk5qeQ-TzN4","colab_type":"code","outputId":"151385d3-6c07-472e-a0b3-a4dd8fe7a67a","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1hlrRACGD5b4_b66O5m7EaTozHT0dN8Aw"},"executionInfo":{"status":"ok","timestamp":1585480899282,"user_tz":-120,"elapsed":1380502,"user":{"displayName":"meysam sadeghi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg9FyGX5Adg2_OFY2w7lccoVCdyXAHqQQgaHlOdrQ=s64","userId":"16670234376997471964"}}},"source":["neural_style_transfer('home_office.jpg', 'picasso_girl_before_a_mirror.jpg', style_layers, content_layers)"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"089mD5dfTO0h","colab_type":"code","outputId":"8f1ba4d7-3763-49e6-f720-7852a339b8b7","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"13N8ZPIFaHgczVNxt_NVpGkgx7S4lWjN-"},"executionInfo":{"status":"ok","timestamp":1585481800896,"user_tz":-120,"elapsed":463385,"user":{"displayName":"meysam sadeghi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg9FyGX5Adg2_OFY2w7lccoVCdyXAHqQQgaHlOdrQ=s64","userId":"16670234376997471964"}}},"source":["neural_style_transfer('home_office.jpg', 'Wassily_Kandinsky-compositionVII.jpg', style_layers, content_layers)"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}